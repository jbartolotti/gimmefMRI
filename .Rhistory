geom_point(alpha = .66, size = 3)
mymonths
as.numeric(as.Date(critdates))
as.numeric(as.Date(critdates,format = '%m%d%y'))
as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3)
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
format((as.Date(mymonths,format = '%m%d%y')), origin = '1970-01-01'), format = '%m-%d')
format(as.Date(mymonths,format = '%m%d%y')), origin = '1970-01-01'), format = '%m-%d')
format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%m-%d')
format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y'))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y'))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing.\nRed lines: Synapse RHEL switch, EDR added, EDR removal')
ggsave(file.path(basedir,'afni_dur_071822.png'),width= 7,height=5)
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45))
ggsave(file.path(basedir,'afni_dur_071822.png'),width= 7,height=5)
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = 1))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = 3))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = -1))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = -.3))
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = 0))
ggsave(file.path(basedir,'afni_dur_071822.png'),width= 7,height=5)
ggplot(subset(alldat, startposix > 1620000000) , aes(x = startposix, y = elapsed_in_minutes/60, color = ver))+#,shape=exp))+
theme_bw()+
labs(x = 'Date') +
#geom_vline(xintercept = seq(xdate[1],xdate[2],60*60*24*7*4), color = 'black') +
geom_vline(xintercept = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24, color = '#CCCCCC')+
geom_vline(xintercept = as.numeric(as.Date(critdates,format = '%m%d%y'))*60*60*24, color = 'red') +
geom_point(alpha = .66, size = 3) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_continuous(breaks = as.numeric(as.Date(mymonths,format = '%m%d%y'))*60*60*24,
labels = format(as.Date(mymonths,format = '%m%d%y', origin = '1970-01-01'), format = '%b-%y')) +
labs(x = '', y = 'Hours', title = 'Time to Complete AFNI data processing on Synapse.\nRed lines: Synapse RHEL switch, EDR added, EDR removal') + theme(axis.text.x = element_text(angle = 45,vjust = .5))
ggsave(file.path(basedir,'afni_dur_071822.png'),width= 7,height=5)
usethat::use_vignette('introduction')
devtools::use_vignette('introduction')
install.packages('usedthat')
install.packages('usethat')
usethat::use_vignette('introduction')
library(usethat)
use_vignette('introduction')
library(devtools)
sessionInfo()
use_vignette()
use_vignette('introduction')
devtools::load_all()
devtools::install()
devtools::load_all()
my.file.browse()
system.file()
system.file('extdata')
devtools::install()
system.file('extdata')
system.file('extdata','DemoGIMME.xlsx')
system.file('extdata','DemoGIMME.xlsx', package = 'gimmefMRI')
myfile <- system.file('extdata','DemoGIMME.xlsx', package = 'gimmefMRI')
mm <- readXLSXinput(myfile)
devtools::load_all()
mm <- readXLSXinput(myfile)
mm
mm$model_spec
a = 'all'
b = c('a','b','c')
length(a)
length(b)
typeof(a)
typeof(b)
a == 'all'
b == 'all'
mm$model_spec$model_name
'first_model' %in% mm$model_spec$model_name
paste(mm$model_spec$model_name,sep = ', ')
paste(mm$model_spec$model_name,collapse = ', ')
paste(mm$model_spec$model_name,collapse = '\n')
message(paste(mm$model_spec$model_name,collapse = '\n'))
mm
names(mm)
names(mm$cntrl)
names(mm$model_spec)
mm$cntrl
mm <- readXLSXinput(myfile)
mm$cntrl
mm$mspec
mm$model_spec
mm$cntrl
t(mm$cntrl[,2:3])
t(mm$cntrl[,3])
mm$lists
mm$cntrl[,2]
a <- list(mm$cntrl[,2])
a
a <- mm$cntrl[,2]
a
list(unlist(mm$cntrl[,2]))
unlist(mm$cntrl[,2])
list(mm$cntrl[,2:3])
lapply(mm$cntrl[,2],function(x){})
lapply(mm$cntrl[,2],function(x){x})
unlist(lapply(mm$cntrl[,2],function(x){x}))
unlist(lapply(1:dim(mm$cntrl)[1],function(x){mm$cntrl[,2:3]}))
lapply(1:dim(mm$cntrl)[1],function(x){mm$cntrl[,2:3]})
lapply(1:dim(mm$cntrl)[1],function(x){mm$cntrl[x,2:3]})
cntrl_wide <- cntrl
cntrl_wide <- mm$cntrl
cntrl_wide
cntrl <- list()
for(i in 1:dim(cntrl_wide)[1]){
cntrl[[cntrl_wide$name[i]]] <- cntrl_wide$value[i]
}
cntrl
cntrl$run_models
logical(cntrl$run_models)
as.logical(cntrl$run_models)
as.logical("TRUE")
getwd()
myfile
strsplit(myfile,'/')
file.path(strsplit(myfile,'/')[1:(length(strsplit(myfile,'/')-1))])
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/')-1))]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))-1)]
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/'))-1)]
strsplit(myfile,'/')[[1:(length(strsplit(myfile,'/'))-1)]]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))-1)]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))-2)]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/')))]
length(strsplit(myfile,'/')))
length(strsplit(myfile,'/'))
length(strsplit(myfile,'/')[[1]])
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))[[1]])]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))[[1]]-1)]
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/'))[[1]]-2)]
1:(length(strsplit(myfile,'/'))[[1]]
)
1:(length(strsplit(myfile,'/')[[1]])
)
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/')[[1]]))
)
strsplit(myfile,'/')[1:(length(strsplit(myfile,'/')[[1]]))]
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]]))]
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]
file.path(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]
file.path(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
file.path(unlist(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]))
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]
file.path('a','b')
file.path(c('a','b'))
do.call('file.path',c('a','b'))
do.call('file.path',list('a','b'))
do.call('file.path',strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
file.path(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]))
file.path(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)])
file.path(unlist(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]))
file.path(paste(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]))
file.path(paste(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]),collapse = ' ')
paste(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)]),collapse = '/')
paste(strsplit(myfile,'/')[[1]][1:(length(strsplit(myfile,'/')[[1]])-1)],collapse = '/')
cntrl
doreplace('PWD/models','PWD','place')
doreplace('{PWD}/models','PWD','place')
pattern = 'PWD'
sub('PWD',PWD/models,'place')
sub('PWD','PWD/models','place')
sub('PWD','PWD/models','place',fixed = TRUE)
sub('PWD/models','PWD','place',fixed = TRUE)
help(sub)
sub('PWD/models','place','PWD')
sub('PWD','place','PWD/models')
sub('PWD','place','PWD/models',fixed = TRUE)
pwd
mm$cntrl
devtools::load_all()
gimmefMRI(mode = 'example')
devtools::load_all()
mm <- gimmefMRI(mode = 'example')
mm$cntrl
devtools::install()
mm <- gimmefMRI(mode = 'example')
mm$cntrl
a <- list(a = 'aa',b = 'bb')
length(a)
b <- list(a = 'aa')
length(b)
b == 'alla
'
names(a) %in% 'bb'
names(a)
names(a) %in% 'b'
run_options <- c('generate_model_code','run_model_code','generate_figure_code','run_figure_code')
paste(run_options, sep = ',')
paste(run_options, collapse = ',')
paste(run_options, collapse = ', ')
paste(run_options, collapse = "', '")
run = c('generate_model_code','stuff','morestuff')
if(any(not(run %in% run_options))){
message(sprintf("WARNING: Allowable run options are '%s'.The following run options were ignored:\n%s",
paste(run_options, collapse = "', '"),
paste(run[not(run %in% run_options)], collapse = '\n')))
}
if(any(!(run %in% run_options))){
message(sprintf("WARNING: Allowable run options are '%s'.The following run options were ignored:\n%s",
paste(run_options, collapse = "', '"),
paste(run[!(run %in% run_options)], collapse = '\n')))
}
mm$model_spec$model_name
mm$cntrl
runmodel_filename = as.character()
length(runmodel_filename)
devtools::install()
getwd()
dir()
library(gimmefMRI)
gimmefMRI
gimmefMRI(mode = 'demo')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
mm$model_spec
grouplist <- strsplit(gsub('[(]','',mm$model_spec[1,'subgroup_names']),')')[[1]]
grouplist
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
mm$model_spec$subgroup_names[1]
is.na(mm$model_spec$subgroup_names[1])
is.na(as.logical(mm$model_spec$subgroup_names[1]))
as.logical(mm$model_spec$subgroup_names[1])
as.logical(mm$model_spec$subgroup_names[2])
mm$model_spec$subgroup_names[1] == 'NA'
mm$model_spec$subgroup_names[1] %in% c('NA','na','n/a','N/A')
mm$model_spec$subgroup_names[2] %in% c('NA','na','n/a','N/A')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo')
mm$cntrl
mm$cntrl$run_model_code
logical(mm$cntrl$run_model_code)
is.logical(mm$cntrl$run_model_code)
mm$cntrl$run_model_code == TRUE
mm$cntrl$run_model_code == FALSE
message('hi')
cat('hi')
gimmefMRI(mode = 'demo', run = c('oeuo'))
gimmefMRI(mode = 'demo', run = c('run_model_code'))
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo', run = c('generate_model_code'))
myfile <- system.file('extdata','DemoGIMME.xlsx', package = 'gimmefMRI')
a <- readxl::read_excel(myfile, sheet = 'models')
a
a <- readxl::read_excel(myfile, sheet = 'models',col_names = FALSE)
a <- readxl::read_excel(myfile, sheet = 'control',col_names = FALSE)
a
a <- readxl::read_excel(myfile, sheet = 'control',col_names = TRUE)
a
a <- readxl::read_excel(myfile, sheet = 'models',col_names = FALSE)
a <- suppressWarnings(readxl::read_excel(myfile, sheet = 'models',col_names = FALSE))
a <- suppressWarnings( readxl::read_excel(myfile, sheet = 'models',col_names = FALSE))
suppressWarnings('a' = 1)
a <- readxl::read_excel(myfile, sheet = 'models',col_names = FALSE)
a <- readxl::read_excel(myfile, sheet = 'models',col_names = TRUE)
a
devtools::install()
a <- readxl::read_excel(myfile, sheet = 'models',col_names = TRUE)
a
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo', run = 'generate_model_code')
gimmefMRI(mode = 'demo', run = 'run_model_code')
library(gimme)
gimmefMRI(mode = 'demo', run = 'run_model_code')
gimme()
devtools::install()
rm(list = ls())
ls()
library(gimmefMRI)
gimmefMRI(mode = 'demo', run = 'run_model_code')
gimmefMRI(mode = 'demo', run = 'run_model_code')
mm$model_spec
myfile <- system.file('extdata','DemoGIMME.xlsx', package = 'gimmefMRI')
mm <- gimmefMRI::readXLSXinput(myfile, getwd())
devtools::load_all()
mm <- gimmefMRI::readXLSXinput(myfile, getwd())
mm$model_spec
thismod <- mm$model_spec[2,]
thismod
exo <- thismod$exogenous_predictors
exo
!(is.na(exo) || exo %in% c('NA','na','n/a','N/A'))
devtools::load_all()
gimmefMRI(mode = 'demo', run = 'generate_model_code')
gimmefMRI(mode = 'demo', run = 'run_model_code')
devtools::load_all()
gimmefMRI(mode = 'demo', run = 'run_model_code')
devtools::load_all()
gimmefMRI(mode = 'demo', run = 'run_model_code')
devtools::load_all()
myfile
mm <- readXLSXinput(myfile,myfile_dir)
myfile_dir <- getwd()
mm <- readXLSXinput(myfile,myfile_dir)
mm$figures
mm$cntrl
mm$model_spec
mm <- readXLSXinput(myfile,myfile_dir)
mm$figures
devtools::load_all()
mm <- readXLSXinput(myfile,myfile_dir)
devtools::load_all()
mm <- readXLSXinput(myfile,myfile_dir)
mm$figures
network_name <- mm$model_spec[mm$model_spec$model_name == thisfig$modelname,'network_name']
thisfig <- mm$figures[1,]
network_name <- mm$model_spec[mm$model_spec$model_name == thisfig$modelname,'network_name']
network_name
mm$model_spec
mm$cntrl
mm <- readXLSXinput(myfile,myfile_dir)
mm$cntrl
devtools::install()
mm <- readXLSXinput(myfile,myfile_dir)
devtools::load_all()
mm <- readXLSXinput(myfile,myfile_dir)
mm$cntrl
mm$figures
network_name
network_name <- mm$model_spec[mm$model_spec$model_name == thisfig$modelname,'network_name']
network_name
mm$model_spec$model_name == thisfig$model_name
thisfig$model_name
mm <- readXLSXinput(myfile,myfile_dir)
mm$figures
network_name <- mm$model_spec[mm$model_spec$model_name == thisfig$modelname,'network_name']
network_name
mm$figures
mm$model_spec$model_name == thisfig$modelname
thisfig <- mm$figures[1,]
thisfig
network_name <- mm$model_spec[mm$model_spec$model_name == thisfig$modelname,'network_name']
network_name
mm$model_spec$model_name == thisfig$modelname
mm$model_spec$model_name
thisfig$model_name
mm$model_spec$model_name %in% thisfig$model_name
network_name <- mm$model_spec[mm$model_spec$model_name %in% thisfig$modelname,'network_name']
network_name
mm$model_spec
mm$model_spec[2,'network_name']
mm$model_spec[mm$model_spec$model_name %in% thisfig$modelname,'network_name']
mm$model_spec[mm$model_spec$model_name %in% thisfig$modelname,]
mm$model_spec[mm$model_spec$model_name %in% thisfig$model_name,]
network_name <- mm$model_spec[mm$model_spec$model_name %in% thisfig$model_name,'network_name']
nodes <- mm$lists[[network_name]]
shortnodes <- applyShorten(nodes,mm$shortnames)
mm$model_spec[mm$model_spec$model_name %in% thisfig$model_name,]
nodes
shortnodes
mm$cntrl$figure_save_directory
savedir <- mm$cntrl$figure_save_directory
savedir <- sub('{MODEL}',savedir,thisfig$model_name, fixed = TRUE)
mm$cntrl$figure_save_directory
savedir
savedir <- mm$cntrl$figure_save_directory
savedir
thisfig$model_name
savedir <- sub('{MODEL}',savedir,thisfig$model_name, fixed = TRUE)
savedir
savedir <- mm$cntrl$figure_save_directory
sub('{MODEL}','a',savedir)
sub('{MODEL}',savedir,'a')
sub('{MODEL}',savedir,'a',fixed = TRUE)
sub('{MODEL}','a',savedir,fixed = TRUE)
devtools::install()
library(gimmefMRI)
gimmefMRI(mode = 'demo', run = 'runoeauu')
gimmefMRI(mode = 'demo', run = 'run_figure_code')
mm
mm$figures
thisfig <- mm$figures[1,]
thisfig$DPI
devtools::load_all()
gimmefMRI(mode = 'demo', run = 'run_figure_code')
thisfig$show_lag_connections
as.logical(thisfig$show_lag_connections)
as.numeric(thisfig$width_pixels)
is.na(as.numeric(thisfig$width_pixels))
is.na(suppressWarnings(as.numeric(thisfig$width_pixels)))
is.na(suppressWarnings(as.numeric('aua')))
devtools::load_all()
gimmefMRI(mode = 'demo', run = 'run_figure_code')
as.logical('NA')
system.file('extdata','get_timecourses.csv', package = 'gimmefMRI')
list('group1' = c(1,2,3), 'group2' = c(10,201,31))
dir()
load_all()
gimmefMRI_templates()
