thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismodel$censor_conditions]]){
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
write.csv(thissub[,short_roicols],
file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders <- function(savedir,mm){
for (i in 1:dim(mm$model_spec)[1] ){
thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismodel$censor_conditions]]){
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
print(s)
print(dim(thissub[,short_roicols]))
print(file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)))
#write.csv(thissub[,short_roicols],
#          file.path(savedir,thismod$model_name,'input_files',
#                    sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders <- function(savedir,mm){
for (i in 1:dim(mm$model_spec)[1] ){
thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismod$censor_conditions]]){
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
print(s)
print(dim(thissub[,short_roicols]))
print(file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)))
write.csv(thissub[,short_roicols],
file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders <- function(savedir,mm){
for (i in 2:dim(mm$model_spec)[1] ){
thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismod$censor_conditions]]){
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
print(s)
print(dim(thissub[,short_roicols]))
print(file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)))
write.csv(thissub[,short_roicols],
file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
initializeGimmeFolders <- function(savedir,mm){
for (i in 2:dim(mm$model_spec)[1] ){
thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismod$censor_conditions]]){
print(censor_cond)
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
print(s)
print(dim(thissub[,short_roicols]))
print(file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)))
write.csv(thissub[,short_roicols],
file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
initializeGimmeFolders(savedir, mm)
initializeGimmeFolders <- function(savedir,mm){
for (i in 1:dim(mm$model_spec)[1] ){
thismod <- mm$model_spec[i,]
#make target directory
dir.create(file.path(savedir,thismod$model_name),showWarnings = FALSE)
dir.create(file.path(savedir,thismod$model_name,'input_files'),showWarnings = FALSE)
#fill target directory with subject .csv files
#subset timecourse data for this run, and rois in this network
roicols <- mm$lists[[thismod$network_name]]
datacols <- c('slicenum', 'time', 'condition', 'censor', 'subnum', 'subgroup', 'run')
colkeep <- c(roicols, datacols)
rowkeep <- mm$timecourses$run == thismod$run
dd <- mm$timecourses[rowkeep,colkeep]
#for each subject, write timecourses to file, after censoring
for(s in mm$lists[[thismod$subselect]])
{
thissub <- subset(dd, subnum == s)
thisgroup <- unique(thissub$subgroup)
#remove censored TRs and conditions
thissub[thissub$censor == 0, roicols] = NA
if (!is.na(thismod$censor_conditions)){
for(censor_cond in mm$lists[[thismod$censor_conditions]]){
thissub[thissub$condition == censor_cond, roicols] = NA
}
}
short_roicols <- applyShorten(roicols,mm$shortnames)
colnames(thissub) <- applyShorten(colnames(thissub),mm$shortnames)
if (dim(thissub)[1] == 0 ){warning(sprintf('Empty dataset for %s. File skipped.',s))}
else{
write.csv(thissub[,short_roicols],
file.path(savedir,thismod$model_name,'input_files',
sprintf('%s_%s.csv',thisgroup,s)), row.names = FALSE)
}
}
}
}
initializeGimmeFolders(savedir, mm)
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
summary(mm)
mm$model_spec
library(doParallel)
detectCores()
maxcores <- .5
numcores <- parallel::detectCores()
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
numcores <- 5
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
numcores <- 1
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
maxcores <- 7
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
numcores
numcores <- 4
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
numcores <- 8
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
usecores
mm
dir()
myfile <- file('test','wb')
write(c('hi','heres','text'),myfile,append = TRUE)
close(myfile)
myfile <- file('test.txt','wb')
write(c('hia','aheres','atext'),myfile,append = TRUE)
write(c('hia','aheres','atext'),myfile,append = TRUE)
close(myfile)
savedir
maxcores <- .5
useCores <- function(maxcores){
#if maxcores is >= 1, use that many, but not more than actual available.
# if maxcores < 1, treat as percent of number of cores, rounded down, at least one.
# if maxcores is 0 (or neg), use one core
if(maxcores > 0){
numcores <- parallel::detectCores()
if(maxcores >= 1){usecores <- min(maxcores, numcores)} else
{usecores <- max(1, floor(numcores*maxcores))}
} else{usecores = 1}
return(usecores)
}
numcores <- useCores(maxcores)
nummodels <- dim(mm$model_spec)[1]
if (numcores == 1){
fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
fortext
maxcores = 1
numcores <- useCores(maxcores)
nummodels <- dim(mm$model_spec)[1]
if (numcores == 1){
fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
fortext
mm
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
mm
?gimme()
library(gimme)
?gimme()
writeGimmeCode <- function(savedir, mm, maxcores = .5){
numcores <- useCores(maxcores)
nummodels <- dim(mm$model_spec)[1]
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[i,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf('gimme(data = %s,',input_basedir),
sprintf('      out = %s,',output_basedir),
'      sep = \',\'',
'      ar = TRUE,',
'      plot = TRUE,',
sprintf('      groupcutoff = %s,',thismod$group_thresh)),
runmodel_fileConn, append = TRUE)
#subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0){
write(c(
'      subgroup = TRUE,',
sprintf('      subcutoff = %s,',thismod$subgroup_thresh)),
runmodel_fileConn, append = TRUE)
} else{
write(c(
'      subgroup = FALSE,'),
runmodel_fileConn, append = TRUE)
}
#apriori subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0 &&
!is.na(thismod$subgroup_names) && length(thismod$subgroup_names)>0){
write(c(
sprintf('      confirm_subgroup = %s,',SUBGROUPS)),
runmodel_fileConn, append = TRUE)
} else {
write(c(
'      confirm_subgroup = NULL,'),
runmodel_fileConn, append = TRUE)
}
#apriori connections
if(FALSE){
} else{
write(c(
'      paths = NULL,'),
runmodel_fileConn, append = TRUE)
}
#exogenous factors
if(FALSE){
} else{
write(c(
'      exogenous = NULL)'),
runmodel_fileConn, append = TRUE)
}
#write this gimme code to file. Will either run sequentially or parallelized
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
numcores <- useCores(maxcores)
nummodels <- dim(mm$model_spec)[1]
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[i,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf('gimme(data = %s,',input_basedir),
sprintf('      out = %s,',output_basedir),
'      sep = \',\'',
'      ar = TRUE,',
'      plot = TRUE,',
sprintf('      groupcutoff = %s,',thismod$group_thresh)),
runmodel_fileConn, append = TRUE)
#subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0){
write(c(
'      subgroup = TRUE,',
sprintf('      subcutoff = %s,',thismod$subgroup_thresh)),
runmodel_fileConn, append = TRUE)
} else{
write(c(
'      subgroup = FALSE,'),
runmodel_fileConn, append = TRUE)
}
#apriori subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0 &&
!is.na(thismod$subgroup_names) && length(thismod$subgroup_names)>0){
write(c(
sprintf('      confirm_subgroup = %s,','SUBGROUPS')),
runmodel_fileConn, append = TRUE)
} else {
write(c(
'      confirm_subgroup = NULL,'),
runmodel_fileConn, append = TRUE)
}
#apriori connections
if(FALSE){
} else{
write(c(
'      paths = NULL,'),
runmodel_fileConn, append = TRUE)
}
#exogenous factors
if(FALSE){
} else{
write(c(
'      exogenous = NULL)'),
runmodel_fileConn, append = TRUE)
}
#write this gimme code to file. Will either run sequentially or parallelized
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
numcores <- useCores(maxcores)
nummodels <- dim(mm$model_spec)[1]
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf('  gimme(data = %s,',input_basedir),
sprintf('      out = %s,',output_basedir),
'      sep = \',\'',
'      ar = TRUE,',
'      plot = TRUE,',
sprintf('      groupcutoff = %s,',thismod$group_thresh)),
runmodel_fileConn, append = TRUE)
#subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0){
write(c(
'      subgroup = TRUE,',
sprintf('      subcutoff = %s,',thismod$subgroup_thresh)),
runmodel_fileConn, append = TRUE)
} else{
write(c(
'      subgroup = FALSE,'),
runmodel_fileConn, append = TRUE)
}
#apriori subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0 &&
!is.na(thismod$subgroup_names) && length(thismod$subgroup_names)>0){
write(c(
sprintf('      confirm_subgroup = %s,','SUBGROUPS')),
runmodel_fileConn, append = TRUE)
} else {
write(c(
'      confirm_subgroup = NULL,'),
runmodel_fileConn, append = TRUE)
}
#apriori connections
if(FALSE){
} else{
write(c(
'      paths = NULL,'),
runmodel_fileConn, append = TRUE)
}
#exogenous factors
if(FALSE){
} else{
write(c(
'      exogenous = NULL)'),
runmodel_fileConn, append = TRUE)
}
#write this gimme code to file. Will either run sequentially or parallelized
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
