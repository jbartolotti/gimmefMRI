write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi)),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi)),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- 'i <- 1'
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
write(c(
"  gimme(data = modelspecs[[i]]$data,",
"      out = modelspecs[[i]]$out,",
"      sep = modelspecs[[i]]$sep,",
"      ar = modelspecs[[i]]$ar,",
"      plot = modelspecs[[i]]$plot,",
"      groupcutoff = modelspecs[[i]]$groupcutoff,",
"      subgroup = modelspecs[[i]]$subgroup,",
"      subcutoff = modelspecs[[i]]$subcutoff,",
"      confirm_subgroup = modelspecs[[i]]$confirm_subgroup,",
"      paths = modelspecs[[i]]$paths,",
"      exogenous = modelspecs[[i]]$exogenous,"),
runmodel_fileConn, append = TRUE)
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
close(runmodel_fileConn)
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- 'i <- 1'
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
write(c(
"  gimme(data = modelspecs[[i]]$data,",
"      out = modelspecs[[i]]$out,",
"      sep = modelspecs[[i]]$sep,",
"      ar = modelspecs[[i]]$ar,",
"      plot = modelspecs[[i]]$plot,",
"      groupcutoff = modelspecs[[i]]$groupcutoff,",
"      subgroup = modelspecs[[i]]$subgroup,",
"      subcutoff = modelspecs[[i]]$subcutoff,",
"      confirm_subgroup = modelspecs[[i]]$confirm_subgroup,",
"      paths = modelspecs[[i]]$paths,",
"      exogenous = modelspecs[[i]]$exogenous",
"  )"),
runmodel_fileConn, append = TRUE)
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
close(runmodel_fileConn)
}
writeGimmeCode(savedir,mm)
devtools::load_all()
rm(writeGimmeCode)
devtools::load_all()
gimmefMRI()
dir('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files')
unlink('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files')
unlink('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files',recursive = TRUE)
ls()
devtools::load_all
devtools::load_all()
gimmefMRI()
cs_subgroups <- list()
cs_subgroups[[2]] <- 'hello'
cs_subgroups
cs_subgroups[[1]]
is.empty(cs_subgroups[[1]])
isempty(cs_subgroups[[1]])
empty(cs_subgroups[[1]])
length(cs_subgroups[[1]])
devtools::load_all
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::document()
gimmefMRI()
mi = 2
cssubgroup_write <- sprintf("cs_subgroups[[%s]]",mi)
cssubgroup_write
sprintf('this is %s',cssubgroup_write)
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
mm$model_spec
ss <- mm$model_spec$subgroup_names
ss
ss <- mm$model_spec$subgroup_names[2]
ss
strsplit(ss,'()')
strsplit(ss,')(')
strsplit(ss,')')
strsplit(gsub(ss,'(',''),')')
gsub(ss,'(','')
gsub(ss,'\(','')
gsub
gsub('(','',ss)
gsub('\(','',ss)
gsub('('(')','',ss)
)
gsub('[(]','',ss)
strsplit(gsub('[(]','',ss),')')
strsplit(gsub('[(]','',ss),')')[[1]]
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
groupnum_lookup <- list()
groupnum_lookup$proband <- 1
groupnum_lookup$control <- 2
groupnum_lookup
devtools::load_all()
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
datadir = 'C:/Users/j186b025/Documents/GitHub/jbartolotti/gimmefMRI/demodat'
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
mm$model_spec
mm$model_spec$apriori_paths[2]
mi <- 2
thismod <- mm$model_spec[mi,]
pathlist <- strsplit(gsub('[(]','',thismod$apriori_paths),')')[[1]]
pathlist
grep('>',pathlist)
grep('<',pathlist)
length(grep('<',pathlist))
L2R <- grep('>',pathlist)
R2L <- grep('<',pathlist)
L2R
R2L
i <- 2
pathlist[i]
strsplit(pathlist[i],'>')[[1]]
mm
R2L
for(i in L2R){print(i)}
for(i in R2L){print(i)}
WGC_paths <- function(thismod, mm){
if (!is.na(thismod$apriori_paths) && length(thismod$apriori_paths)>0){
paths <- as.character()
pathlist <- strsplit(gsub('[(]','',thismod$apriori_paths),')')[[1]]
L2R <- grep('>',pathlist)
R2L <- grep('<',pathlist)
for(i in L2R){
nodes <- strsplit(pathlist[i],'>')[[1]]
paths <- c(paths,sprintf("\'%s ~ %s\'",
applyShorten(nodes[2],mm$shortnames),
applyShorten(nodes[1],mm$shortnames)))
}
for(i in R2L){
nodes <- strsplit(pathlist[i],'<')[[1]]
paths <- c(paths,sprintf("\'%s ~ %s\'",
applyShorten(nodes[1],mm$shortnames),
applyShorten(nodes[2],mm$shortnames)))
}
paths_write <- sprintf('c(%s)',paste(paths, collapse = ','))
}else{paths_write <- 'NULL'}
return(paths_write)
}
applyShorten()
rm(WGC_paths)
devtools::load_all()
WGC_paths(thismod,mm)
thismod$apriori_paths
thismod$apriori_paths
thismod$apriori_paths <- '(A>B)(BB<AA)(BBB~AAA)'
devtools::load_all()
WGC_paths(thismod,mm)
thismod
mm
mm$model_spec
devtools::load_all()
thismod <- mm$model_spec[1,]
WGC_exogenous(thismod)
exo <- thismod$exogenous_predictors
exo
exo <- "(exo1)(exo2)"
exolist <- strsplit(gsub('[(]','',exo),')')[[1]]
exolist
sprintf("\'%s\'",exolist)
paste(sprintf("\'%s\'",exolist),collapse = ',')
devtools::load_all()
WGC_exogenous(thismod)
exolist
applyShorten(exolist,mm$shortnames)
devtools::load_all()
WGC_exogenous(thismod,mm)
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
thismod <- mm$model_spec[mi,]
modu <- thismod$modulatory_predictors
modu
thismod
thismod <- mm$model_spec[1,]
thismod
modu <- thismod$modulatory_predictors
modu
modulist <- strsplit(gsub('[(]','',modu),')')[[1]]
modulist
sides <- strsplit(amod,'*')
amod = modulist
sides <- strsplit(amod,'*')
sides
sides <- strsplit(amod,'[*]')
sides
sides <- strsplit(amod,'[*]')[[1]]
sides
mm$lists
mm$lists[sides[1]]
length(mm$lists[sides[1]])
(mm$lists[sides[2]]
)
mm$lists[sides[2]]
mm$lists[sides[1]]
mm$lists[sides[1]]== 'NULL'
mm$lists[sides[2]]== 'NULL'
if(mm$lists[sides[1]]=='NULL'){Lside <- sides[1]}else{Lside <- mm$lists[sides[1]]}
if(mm$lists[sides[2]]=='NULL'){Rside <- sides[2]}else{Rside <- mm$lists[sides[2]]}
Lside
Rside
sprintf('%s*%s',Lside,Rside)
sprintf('%s*%s',Lside,unlist(Rside))
sprintf('%s*%s',unlist(Lside),unlist(Rside))
sprintf('%s*%s',unlist(Rside),unlist(Rside))
Lside
applyShorten(Lside,mm$shortnames)
applyShorten(Rside,mm$shortnames)
applyShorten(unlist(Rside),mm$shortnames)
if(mm$lists[sides[1]]=='NULL'){Lside <- sides[1]}else{Lside <- unlist(mm$lists[sides[1]])}
if(mm$lists[sides[2]]=='NULL'){Rside <- sides[2]}else{Rside <- unlist(mm$lists[sides[2]])}
applyShorten(Rside,mm$shortnames)
LS = Lside
sprintf("\'%s*%s\'",LS,Rside)
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
thismod <- mm$model_spec[1,]
modu <- thismod$modulatory_predictors
all_mods <- as.character()
modulist <- strsplit(gsub('[(]','',modu),')')[[1]]
amod <- modulist
sides <- strsplit(amod,'[*]')[[1]]
if(mm$lists[sides[1]]=='NULL'){Lside <- sides[1]}else{Lside <- unlist(mm$lists[sides[1]])}
if(mm$lists[sides[2]]=='NULL'){Rside <- sides[2]}else{Rside <- unlist(mm$lists[sides[2]])}
Lside
Rside
sides
mm$lists
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
mm$info_lists
mm$lists
sides <- strsplit(amod,'[*]')[[1]]
if(mm$lists[sides[1]]=='NULL'){Lside <- sides[1]}else{Lside <- unlist(mm$lists[sides[1]])}
if(mm$lists[sides[2]]=='NULL'){Rside <- sides[2]}else{Rside <- unlist(mm$lists[sides[2]])}
Rside
for(LS in Lside){
all_mods <- c(all_mods,sprintf("\'%s*%s\'",LS,Rside))
}
all_mods
duplicateLR <- unlist(lapply(all_mods, function(x){spl <- strsplit(x,'[*]')[[1]]; return(spl[1]==spl[2])}))
duplicateLR
all_mods[11]
strsplit(all_mods[11],'[*]')
strsplit(all_mods[11],'[*]')[[1]]
gsub("\'",'',strsplit(all_mods[11],'[*]')[[1]]
)
duplicateLR <- unlist(lapply(all_mods, function(x){spl <- gsub("\'",'',strsplit(x,'[*]')[[1]]); return(spl[1]==spl[2])}))
duplicateLR
all_mods <- all_mods(!duplicateLR)
all_mods <- all_mods[!duplicateLR]
all_mods
all_mods = c(all_mods,all_mods[1:2])
all_mods
unique(all_mods)
devtools::load_all
devtools::load_all()
thismod
WGC_modulatory(thismod,mm)
devtools::load_all()
WGC_modulatory(thismod,mm)
devtools::load_all()
gimmefMRI()
head(mm$timecourses)
gimmefMRI()
devtools::load_all()
gimmefMRI()
library(gimme)
gimmefMRI()
runmodel_filename <- '
//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/runmodels.R'
runmodel_filename
runmodel_filename <- '//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/runmodels.R'
runmodel_filename
system(sprintf('Rscript %s',runmodel_filename))
gimme()
system(sprintf('Rscript %s',runmodel_filename))
system(sprintf('Rscript %s',runmodel_filename))
system(sprintf('Rscript %s',runmodel_filename))
dir.create()
