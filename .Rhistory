runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
#write code to generate cs_subgroup dataframe from filelist to the .R file
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0 &&
!is.na(thismod$subgroup_names) && length(thismod$subgroup_names)>0){
grouplist <- mm$lists[[thismod$subgroup_names]]
grouplist_string <- paste('grouplist <- c(',
paste(unlist(lapply(grouplist,function(x){return(sprintf("\'%s\'",x))})),collapse=','),
')',collapse='')
write(c(
grouplist_string,
"groupnum_lookup <- list()",
"index <- 0",
"for(g in grouplist){index <- index+1; groupnum_lookup[g] = index}",
sprintf("cs_subgroups = data.frame(filename = dir(%s), groupnum = 0, stringsAsFactors = FALSE)",input_basedir),
"cs_subgroups$filename = unlist(lapply(cs_subgroups$filename, function(x){gsub(\'.csv\',\'\',x)}))",
"cs_subgroups$groupnum = unlist(lapply(cs_subgroups$filename, function(x){groupnum_lookup[[strsplit(x,\'_\')[[1]][1]]]}))"),
runmodel_fileConn, append = TRUE
)
}
write(c(
sprintf("  gimme(data = \'%s\',",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh)),
runmodel_fileConn, append = TRUE)
#subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0){
write(c(
"      subgroup = TRUE,",
sprintf("      subcutoff = %s,",thismod$subgroup_thresh)),
runmodel_fileConn, append = TRUE)
} else{
write(c(
"      subgroup = FALSE,"),
runmodel_fileConn, append = TRUE)
}
#apriori subgroups
if(!is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0 &&
!is.na(thismod$subgroup_names) && length(thismod$subgroup_names)>0){
write(c(
sprintf("      confirm_subgroup = %s,",'SUBGROUPS')),
runmodel_fileConn, append = TRUE)
} else {
write(c(
"      confirm_subgroup = NULL,"),
runmodel_fileConn, append = TRUE)
}
#apriori connections
if(FALSE){
} else{
write(c(
"      paths = NULL,"),
runmodel_fileConn, append = TRUE)
}
#exogenous factors
if(FALSE){
} else{
write(c(
"      exogenous = NULL)"),
runmodel_fileConn, append = TRUE)
}
#write this gimme code to file. Will either run sequentially or parallelized
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
a = list()
a[[1]] = list(name = 'james', age = 999)
a
a[[1]]$name
sprintf('i am %s',a[[1]]$name)
sprintf('this is %s yeah',1==1)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list("),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh)),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")",
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi)),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list("),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi)),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi)),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- as.character()
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
write(c(
sprintf("  gimme(data = modelspecs[[%s]]$data,",mi),
sprintf("      out = modelspecs[[%s]]$out,",mi),
sprintf("      sep = modelspecs[[%s]]$sep,",mi),
sprintf("      ar = modelspecs[[%s]]$ar,",mi),
sprintf("      plot = modelspecs[[%s]]$plot,",mi),
sprintf("      groupcutoff = modelspecs[[%s]]$groupcutoff,",mi),
sprintf("      subgroup = modelspecs[[%s]]$subgroup,",mi),
sprintf("      subcutoff = modelspecs[[%s]]$subcutoff,",mi),
sprintf("      confirm_subgroup = modelspecs[[%s]]$confirm_subgroup,",mi),
sprintf("      paths = modelspecs[[%s]]$paths,",mi),
sprintf("      exogenous = modelspecs[[%s]]$exogenous,",mi)),
runmodel_fileConn, append = TRUE)
}
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- 'i <- 1'
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
write(c(
"  gimme(data = modelspecs[[i]]$data,",
"      out = modelspecs[[i]]$out,",
"      sep = modelspecs[[i]]$sep,",
"      ar = modelspecs[[i]]$ar,",
"      plot = modelspecs[[i]]$plot,",
"      groupcutoff = modelspecs[[i]]$groupcutoff,",
"      subgroup = modelspecs[[i]]$subgroup,",
"      subcutoff = modelspecs[[i]]$subcutoff,",
"      confirm_subgroup = modelspecs[[i]]$confirm_subgroup,",
"      paths = modelspecs[[i]]$paths,",
"      exogenous = modelspecs[[i]]$exogenous,"),
runmodel_fileConn, append = TRUE)
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
close(runmodel_fileConn)
}
writeGimmeCode(savedir,mm)
writeGimmeCode <- function(savedir, mm, maxcores = .5){
runmodel_fileConn <- file(file.path(savedir,'runmodels.R'),'wb')
nummodels <- dim(mm$model_spec)[1]
write('modelspecs <- list()',runmodel_fileConn, append = TRUE)
for(mi in 1:nummodels){
thismod <- mm$model_spec[mi,]
input_basedir = file.path(savedir,thismod$model_name,'input_files')
output_basedir = file.path(savedir,thismod$model_name)
dosubgroup <- !is.na(thismod$subgroup_thresh) && length(thismod$subgroup_thresh)>0
if(dosubgroup){subcutoff <- thismod$subgroup_thresh}else{subcutoff <- 'NULL'}
write(c(
sprintf("modelspecs[[%s]] <- list(",mi),
sprintf("      data = \'%s\'",input_basedir),
sprintf("      out = \'%s\',",output_basedir),
"      sep = \',\',",
"      ar = TRUE,",
"      plot = TRUE,",
sprintf("      groupcutoff = %s,",thismod$group_thresh),
sprintf("      subgroup = %s,",dosubgroup),
sprintf("      subcutoff = %s,",subcutoff),
"      confirm_subgroup = NULL",
"      paths = NULL",
"      exogenous = NULL",
")"),
runmodel_fileConn,append = TRUE)
}
numcores <- useCores(maxcores)
if (numcores == 1){
fortext <- 'i <- 1'
#  fortext <- sprintf('for(i in 1:%s){',nummodels)
}else{
fortext <- c(sprintf('registerDoParallel(%s)',numcores),sprintf('foreach(i=1:%s) %%dopar%% {',nummodels))
}
write(fortext, runmodel_fileConn,append = TRUE)
write(c(
"  gimme(data = modelspecs[[i]]$data,",
"      out = modelspecs[[i]]$out,",
"      sep = modelspecs[[i]]$sep,",
"      ar = modelspecs[[i]]$ar,",
"      plot = modelspecs[[i]]$plot,",
"      groupcutoff = modelspecs[[i]]$groupcutoff,",
"      subgroup = modelspecs[[i]]$subgroup,",
"      subcutoff = modelspecs[[i]]$subcutoff,",
"      confirm_subgroup = modelspecs[[i]]$confirm_subgroup,",
"      paths = modelspecs[[i]]$paths,",
"      exogenous = modelspecs[[i]]$exogenous",
"  )"),
runmodel_fileConn, append = TRUE)
#close parallel loop if necessary
if (numcores > 1){
write(c(
'}'),
runmodel_fileConn, append = TRUE)
}
close(runmodel_fileConn)
}
writeGimmeCode(savedir,mm)
devtools::load_all()
rm(writeGimmeCode)
devtools::load_all()
gimmefMRI()
dir('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files')
unlink('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files')
unlink('//kumc.edu/data/Research/Hoglund/Bartolotti_J/gimme_toolkit/models/BGR_g75_sg75/input_files',recursive = TRUE)
ls()
devtools::load_all
devtools::load_all()
gimmefMRI()
cs_subgroups <- list()
cs_subgroups[[2]] <- 'hello'
cs_subgroups
cs_subgroups[[1]]
is.empty(cs_subgroups[[1]])
isempty(cs_subgroups[[1]])
empty(cs_subgroups[[1]])
length(cs_subgroups[[1]])
devtools::load_all
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::document()
gimmefMRI()
mi = 2
cssubgroup_write <- sprintf("cs_subgroups[[%s]]",mi)
cssubgroup_write
sprintf('this is %s',cssubgroup_write)
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
mm <- readModelInput(file.path(datadir,'timecourses.csv'),
file.path(datadir,'model_spec.csv'),
file.path(datadir,'info_lists.csv'),
file.path(datadir,'shortnames.csv'))
mm$model_spec
ss <- mm$model_spec$subgroup_names
ss
ss <- mm$model_spec$subgroup_names[2]
ss
strsplit(ss,'()')
strsplit(ss,')(')
strsplit(ss,')')
strsplit(gsub(ss,'(',''),')')
gsub(ss,'(','')
gsub(ss,'\(','')
gsub
gsub('(','',ss)
gsub('\(','',ss)
gsub('('(')','',ss)
)
gsub('[(]','',ss)
strsplit(gsub('[(]','',ss),')')
strsplit(gsub('[(]','',ss),')')[[1]]
devtools::load_all()
gimmefMRI()
devtools::load_all()
gimmefMRI()
groupnum_lookup <- list()
groupnum_lookup$proband <- 1
groupnum_lookup$control <- 2
groupnum_lookup
